---
import ScrollArea from '@/components/ScrollArea.astro'
import TableOfContentsHeading from './TableOfContentsHeading.astro'

export interface Heading {
  depth: number
  slug: string
  text: string
  subheadings: Heading[]
}

const { headings } = Astro.props
const toc = buildToc(headings)

function buildToc(headings: Heading[]): Heading[] {
  const toc: Heading[] = []
  const stack: Heading[] = []

  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] }

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop()
    }

    if (stack.length === 0) {
      toc.push(heading)
    } else {
      stack[stack.length - 1].subheadings.push(heading)
    }

    stack.push(heading)
  })

  return toc
}
---

<nav
  class="sticky top-[5.5rem] col-start-1 mt-10 hidden h-[calc(100vh-5.5rem)] text-xs leading-4 xl:block"
>
  <div class="flex justify-end">
    <ScrollArea class="max-h-[calc(100vh-8rem)]">
      <ul
        class="flex flex-col justify-end gap-y-2 overflow-y-auto px-8"
        id="toc-container"
      >
        <li>
          <h2 class="mb-2 text-lg font-semibold">Table of Contents</h2>
        </li>
        {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
      </ul>
    </ScrollArea>
  </div>
</nav>

<script>
  const header = document.querySelector('header')
  const headerHeight = header ? header.offsetHeight : 0

  const observer = new IntersectionObserver(
    (sections) => {
      sections.forEach((section) => {
        const heading = section.target.querySelector('h2, h3, h4, h5, h6')
        if (!heading) return

        const id = heading.getAttribute('id')
        const link = document.querySelector(
          `#toc-container li a[href="#${id}"]`,
        )
        if (!link) return

        const addRemove = section.isIntersecting ? 'add' : 'remove'
        link.classList[addRemove]('text-foreground')
      })
    },
    {
      rootMargin: `-${headerHeight}px 0px 0px 0px`,
    },
  )

  const sections = document.querySelectorAll('.prose section')
  sections.forEach((section) => {
    observer.observe(section)
  })
</script>
