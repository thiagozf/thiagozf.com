---
import Avatar from '@/components/Avatar.astro'
import Badge from '@/components/Badge.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Button from '@/components/Button.astro'
import Link from '@/components/Link.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import Separator from '@/components/Separator.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import Layout from '@/layouts/Layout.astro'
import { getPostImage } from '@/lib/posts'
import { buildPostSchema } from '@/lib/schemas'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Schema } from 'astro-seo-schema'
import {
  type CollectionEntry,
  getCollection,
  getEntry,
  render,
} from 'astro:content'

export async function getStaticPaths() {
  const posts = (await getCollection('blog'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

type Props = CollectionEntry<'blog'>

const posts = (await getCollection('blog'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

function getPostIndex(id: string): number {
  return posts.findIndex((post) => post.id === id)
}

function getPrevPost(id: string): Props | null {
  const postIndex = getPostIndex(id)
  return postIndex !== -1 && postIndex < posts.length - 1
    ? posts[postIndex + 1]
    : null
}

function getNextPost(id: string): Props | null {
  const postIndex = getPostIndex(id)
  return postIndex > 0 ? posts[postIndex - 1] : null
}

const currentPostId = Astro.params.id
const nextPost = getNextPost(currentPostId)
const prevPost = getPrevPost(currentPostId)

const post = Astro.props
const { Content, headings } = await render(post)

const author = await getEntry(post.data.author)
const schema = buildPostSchema(post, author)
const image = getPostImage(post)
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={image}
>
  <Schema slot="head" item={schema} />

  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 *:px-4"
  >
    <Breadcrumbs
      items={[
        { href: '/blog/', label: 'Blog', icon: 'lucide:archive' },
        { label: post.data.title, icon: 'lucide:file-text' },
      ]}
      class="col-start-2"
    />
    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col gap-y-4">
        <h1 class="text-4xl font-bold leading-tight sm:text-5xl">
          {post.data.title}
        </h1>

        <div
          class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground"
        >
          <div class="flex items-center gap-x-2">
            <div class="flex items-center gap-x-1.5">
              <Avatar
                src={author.data.avatar}
                alt={author.data.name}
                width={30}
                height={30}
                class="size-5"
              />
              <Link
                href={`/authors/${author.id}/`}
                underline
                class="text-foreground"
              >
                <span>{author.data.name}</span>
              </Link>
            </div>
          </div>
          <Separator orientation="vertical" class="h-4" />
          <div class="flex items-center gap-2">
            <span>{formatDate(post.data.date)}</span>
            <Separator orientation="vertical" class="h-4" />
            <span>{readingTime(post.body!)}</span>
          </div>
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags && post.data.tags.length > 0 ? (
              post.data.tags.map((tag) => (
                <Badge as="a" href={`/tags/${tag}/`} variant="secondary">
                  <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
                  {tag}
                </Badge>
              ))
            ) : (
              <span class="text-sm text-muted-foreground">
                No tags available
              </span>
            )
          }
        </div>
      </div>
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article
      class="prose prose-sm prose-neutral col-start-2 max-w-none dark:prose-invert"
    >
      <Content />
    </article>

    <PostNavigation prevPost={prevPost} nextPost={nextPost} />
  </section>

  <div id="scroll-to-top" class="fixed bottom-8 right-8 z-50 hidden">
    <Button
      as="button"
      type="button"
      variant="outline"
      size="icon"
      title="Scroll to top"
      aria-label="Scroll to top"
      class="group"
    >
      <Icon
        name="lucide:arrow-up"
        class="size-4 transition-all group-hover:-translate-y-0.5"
      />
    </Button>
  </div>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
